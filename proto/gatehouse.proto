syntax = "proto3";
package gatehouse;

import "common.proto";
import "entities.proto";
import "groups.proto";
import "policies.proto";
import "roles.proto";
import "targets.proto";

/// A request to see if an entity can take an action on a target
message CheckRequest {
    // the entity to be checked
    entities.Entity entity = 1;
    // environment attributes
    map<string, common.AttributeValues> env_attributes = 2;

    // the name of target to check against
    string target_name = 3;
    // the type of target to check against
    string target_type = 4;
    // the action to check against
    string target_action = 5;
}

/// The response to a check request
message CheckResponse {
    // the decision made on the check
    policies.DECIDE decision = 1;
}

/** The main Gatehouse server */
service Gatehouse {
    /** TARGETS */
    // add a new target 
    rpc AddTarget (targets.AddTargetRequest) returns (targets.TargetResponse);

    // modify an existing target
    rpc ModifyTarget (targets.ModifyTargetRequest) returns (targets.TargetResponse);

    // remove an existing target
    rpc RemoveTarget(targets.RemoveTargetRequest) returns (targets.TargetResponse);

    // get all existing targets
    rpc GetTargets(targets.GetAllTargetsRequest) returns (targets.MultiTargetResponse);

    /** ENTITIES */
    // add a new entity
    rpc AddEntity (entities.AddEntityRequest) returns (entities.EntityResponse);

    // modify an existing entity
    rpc ModifyEntity (entities.ModifyEntityRequest) returns (entities.EntityResponse);

    // remove an existing entity
    rpc RemoveEntity (entities.RemoveEntityRequest) returns (entities.EntityResponse);

    // get all entities (or filter)
    rpc GetEntities (entities.GetAllEntitiesRequest) returns (entities.MultiEntityResponse);

    /** ROLES */
    // add a new role
    rpc AddRole (roles.AddRoleRequest) returns (roles.RoleResponse);

    // delete an existing role
    rpc RemoveRole(roles.RemoveRoleRequest) returns (roles.RoleResponse);

    // get all roles (or filter by name to see if a role exists)
    rpc GetRoles (roles.GetAllRolesRequest) returns (roles.MultiRoleResponse);

    /** GROUPS */
    // add a new group
    rpc AddGroup (groups.AddGroupRequest) returns (groups.GroupResponse);

    // modify an existing group
    rpc ModifyGroup (groups.ModifyGroupRequest) returns (groups.GroupResponse);

    // remove an existing group
    rpc RemoveGroup (groups.RemoveGroupRequest) returns (groups.GroupResponse);

    // get all groups (or with filters)
    rpc GetGroups (groups.GetAllGroupsRequest) returns (groups.MultiGroupResponse);

    /** POLICIES */
    // add a new policy
    rpc AddPolicy (policies.AddPolicyRequest) returns (policies.PolicyResponse);

    // modify an existing policy
    rpc ModifyPolicy (policies.ModifyPolicyRequest) returns (policies.PolicyResponse);

    // remove an existing policy
    rpc RemovePolicy (policies.RemovePolicyRequest) returns (policies.PolicyResponse);

    // get policies
    rpc GetPolicies (policies.GetPoliciesRequest) returns (policies.MultiPolicyResponse);

    /** DECISIONS */
    // get a decision on a target's attempt to use a target
    rpc check (CheckRequest) returns (CheckResponse);
}